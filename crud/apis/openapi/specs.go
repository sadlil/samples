// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package openapi generated by go-bindata.// sources:
// apis/openapi/apis/swagger.json
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apisOpenapiApisSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xbf\x6e\xdc\x30\x0c\xc6\xf7\x7b\x0a\x42\xed\x18\x9c\xd2\x14\x28\x70\x9e\x12\x34\x4b\xb7\xa0\x41\xa7\xa2\x03\x4f\xa6\x6d\xa5\xfa\x07\x91\x4e\x7b\x0d\xfc\xee\x85\x6c\xf7\x4e\x97\x22\x40\x80\x6c\xb6\xbe\x1f\xc9\x4f\x24\xf5\xb4\x01\x50\xfc\x0b\xfb\x9e\xb2\x6a\x40\x5d\x6d\x2f\xd5\x45\x39\xb3\xa1\x8b\xaa\x81\xa2\x03\x28\xb1\xe2\xa8\xe8\xf7\xe8\x93\x23\xf8\xfc\xf5\xdb\x2d\xdc\xdc\x7d\xe1\x19\x06\x50\x8f\x94\xd9\xc6\x50\x90\xc7\xcb\xed\x87\x35\x0b\x80\x32\x31\x08\x1a\x39\xa6\x02\x50\xe4\xd1\xba\x42\xfe\xfc\x63\xb3\xf8\xeb\xbe\xfc\x6f\x4d\xf4\x6a\x26\xa6\x0d\xc0\x34\x7b\x18\x22\x97\x40\x35\x88\xa4\x46\x6b\x17\x0d\xba\x72\xd6\x7c\xda\xed\x76\x8b\x4d\x36\x03\x79\x62\xd5\xc0\xf7\xa5\x5e\x61\x4b\x9e\x1f\xb3\x6c\x62\xe0\xf1\x4c\xc7\x94\x9c\x35\x28\x36\x06\xfd\xc0\x31\x9c\xd8\x94\x63\x3b\x9a\x57\xb2\x28\x43\x01\x9f\x16\xa3\x2d\x75\x36\xd8\xc2\xf1\xa9\x67\x29\x47\x89\xfb\xb1\xbb\x09\x87\xfa\xf6\x72\x48\x73\x27\xe3\xfe\x81\x8c\xac\x6d\x5a\xf0\x44\x59\x2c\x71\x45\x03\xa8\xeb\x35\xe0\x74\x54\x25\x61\xc9\x36\xf4\xea\x28\x4d\xeb\xd7\x74\x4c\x8b\x6d\x3b\x1b\x43\x77\x77\x56\x60\x21\x57\x4e\xe5\x64\xee\x05\x65\xe4\xb7\x38\x35\xb1\x7d\xd1\xa8\x0d\x42\x65\xc5\x2e\x6a\xb1\x8b\xd9\xa3\xac\xf2\xc7\xab\xea\x1a\x27\x4c\x79\x62\xc6\xfe\xf5\x1d\xa8\x42\x5b\x12\xb4\x8e\x5f\x0a\xc5\x9c\xf1\x70\xee\xc8\x0a\xf9\xe7\x3c\x80\x7a\x9f\xa9\x2b\x11\xef\x74\x35\x69\x5d\x0f\xb8\xe2\xa7\xff\xa7\xf1\x6c\xaf\xe9\xb7\x50\x0e\xe8\x6e\xa3\xa9\xf6\x65\xcc\xee\xdf\xb2\x73\xa3\x75\x6f\x65\x18\xf7\xe5\x59\x68\xc6\xd6\x59\xa7\x79\x7e\x7b\xac\x25\x13\x69\x8f\x36\x68\x93\xc7\xb6\x94\x9e\x36\xd3\xe6\x6f\x00\x00\x00\xff\xff\xf7\xc9\xca\xd9\xca\x03\x00\x00")

func apisOpenapiApisSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apisOpenapiApisSwaggerJson,
		"apis/openapi/apis/swagger.json",
	)
}

func apisOpenapiApisSwaggerJson() (*asset, error) {
	bytes, err := apisOpenapiApisSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apis/openapi/apis/swagger.json", size: 970, mode: os.FileMode(420), modTime: time.Unix(1651704044, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apis/openapi/apis/swagger.json": apisOpenapiApisSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apis": {nil, map[string]*bintree{
		"openapi": {nil, map[string]*bintree{
			"apis": {nil, map[string]*bintree{
				"swagger.json": {apisOpenapiApisSwaggerJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
