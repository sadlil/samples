// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// apis/openapi/apis/swagger.json
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apisOpenapiApisSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xdb\xb8\x12\x7e\xf7\xaf\x18\xe8\x9c\x87\x73\x80\xd4\x4a\xbb\x45\x81\xe6\xa9\xd9\x3a\x28\x82\x2d\x9c\x20\x17\xec\xc3\x36\x28\x68\x71\x2c\xb3\xa5\x48\x85\x43\x39\xf5\x16\xfe\xef\x0b\x52\x92\x75\x77\x92\x26\xe9\x7a\x17\xd1\x9b\x78\x19\x7d\x33\x9c\x6f\x2e\xb4\xbf\x8f\x00\x02\xba\x61\x71\x8c\x26\x38\x80\xe0\xd5\x78\x3f\xd8\x73\x63\x42\xcd\x75\x70\x00\x6e\x1e\x20\xb0\xc2\x4a\x74\xf3\xe7\x2c\x49\x25\xc2\xfb\xb3\xcb\x09\x1c\x9e\x1e\x93\x5f\x0c\x10\x2c\xd1\x90\xd0\xca\x2d\x59\xee\x8f\x5f\x16\x52\x00\x82\x48\x2b\xcb\x22\xbb\x11\x05\x10\x60\xc2\x84\x74\x2b\xbf\xfe\x29\x8c\x4d\xde\xc5\xee\x7d\x1c\xe9\x24\xf0\x2b\xd6\x23\x80\xb5\xc7\x60\x59\x4c\xc1\x01\xfc\xe1\x87\x37\xdb\x15\x4b\x3c\x94\x0b\xcd\xf5\x39\x9a\xa5\x88\xb0\xda\x78\xe5\x37\x2e\x34\xb9\x2f\x06\x0b\x6b\xd3\x83\x30\x94\x3a\x62\xd2\x8d\x1d\xbc\x79\xfb\xf6\x6d\xae\x1f\x45\x0b\x4c\xb0\x12\xef\xd7\x06\x1b\x09\x91\x56\x94\x35\xe6\x59\x9a\x4a\x11\x31\x2b\xb4\x0a\xbf\x90\x56\xd5\xda\xd4\x68\x9e\x45\x77\x5c\xcb\xec\x82\x2a\xbb\x86\x2c\x15\xe1\xf2\x65\x68\x35\xd7\x75\x13\xa5\xb9\x02\xe5\xbb\xc3\x9b\x25\x09\x33\x2b\xa7\xd5\x7b\x83\xcc\xa2\x53\x1f\xce\x4e\xdf\x43\xe4\x5f\x09\x18\x28\xbc\x01\x3f\xac\x67\x5f\x30\xb2\xe3\xe2\x0c\xfc\x7e\x9d\xa2\xf1\x80\x8e\x79\xcb\x78\x9f\x2b\x79\xf5\x0d\x06\x29\xd5\x8a\x90\x1a\x38\x00\x82\x57\xfb\xfb\xad\x21\x80\x80\x23\x45\x46\xa4\xb6\xf0\x81\x43\xa0\x2c\x8a\x90\x68\x9e\x49\x28\x25\xd5\xf1\xe4\x3a\xb9\x33\x60\x1d\x61\x00\xc1\x7f\x0d\xce\x9d\x9c\xff\x84\x1c\xe7\x42\x09\x27\x97\xc2\xe5\xcb\x0a\xea\x59\x21\x34\x68\x6c\x5d\xd7\xde\xd6\xf5\xaf\x05\x1c\xe7\x2c\x93\xf6\x76\xe4\x0a\x32\x85\xdf\x52\x8c\x2c\x72\x40\x63\xb4\x79\x3c\x05\x4c\x1a\x9d\x5b\x66\x33\xda\x82\x7a\xd4\x83\x3f\x48\x99\x61\x09\x5a\x34\x95\x93\xe5\x4f\x4b\x99\x92\x1b\x33\xcd\x57\x6d\xb0\x42\x0d\xcd\x18\xbc\xce\x84\x41\xe7\x18\xd6\x64\xf8\xa8\xa7\x74\x9d\x21\xd9\xbb\xa8\x7b\x55\x53\xb7\x41\xfc\x62\xac\x43\x77\xbf\x69\x54\x17\x53\x58\xac\xc1\xaa\xf0\xbb\xe0\xeb\x3a\xb5\x38\x4a\xb4\x38\x48\xae\x8b\x05\xc2\xc4\x2f\xd9\x10\x2c\xdf\xe1\x08\x56\x23\x17\xcc\x18\x21\x07\xad\x40\x58\x82\xe3\xc9\x5d\xc9\x56\xc9\xde\x19\xb2\xa5\xc6\xe1\xb5\x22\xff\xfa\xfa\x99\x50\xb5\xcf\x96\x84\x12\xbc\x9f\x4e\x2e\x9e\xdf\x8f\x4e\x76\x95\x7a\x89\x64\x8d\x50\x71\xf0\x04\x5c\xd8\xdb\x64\x91\x6c\x38\x89\x5c\xa6\xbc\x9e\x44\x32\xff\x4a\xc0\x14\xe0\x37\x41\x56\xa8\xf8\x47\x52\x49\x25\x75\x67\xbc\x7b\x28\x48\x55\x50\x9f\x53\x89\x7f\xfe\x4e\xcf\xdf\xdb\x95\x94\x56\x62\xcc\xdd\xbe\x25\xb5\x13\x2b\x5b\xb3\xde\xba\x2b\xa9\x19\xef\x9d\xdc\xe2\x8c\x9e\x31\x9d\x0d\xeb\xd1\xb6\xf7\x9f\x9a\x46\xeb\xea\x06\x31\x0e\xc7\x95\x8f\x82\xec\x26\xaa\x18\xb4\x46\xe0\xd2\xe7\x4e\x29\xc8\x82\x9e\xd7\xa3\x0a\xdd\x35\xac\x94\x42\x77\x3e\xa8\x94\x40\x9f\x43\x8a\x7f\x06\xa8\x2c\x45\x22\xda\xdc\x2a\xb8\x7c\x9d\xa1\xd9\x46\xe6\x39\x93\x74\x4b\x5c\x69\xcd\xce\xb5\x49\x98\xef\x06\x85\xb2\x6f\x5e\xdf\x37\xec\xe8\xf9\x9c\xf0\x9f\x02\x96\xb4\xb1\x27\x86\xa3\x79\x32\xbc\xf7\x05\x94\xfb\xd3\x4f\xb2\x1e\xaa\x2c\x69\x79\xa0\x1f\xbf\x9c\xfe\x36\x3d\xf9\x7d\xda\x8d\xe6\xa7\x47\xd3\xc9\xf1\xf4\x43\x77\xe2\x78\xfa\xf9\xf4\xec\xe4\xc3\xd9\xd1\xf9\x79\x77\x72\x72\x32\x3d\xea\x19\x3d\xfa\x78\x74\x71\x34\xe9\x4e\x1c\xfe\x7a\x38\x75\x5b\x26\x4d\x5a\x5d\xed\xb5\x99\x5e\x86\x80\x0d\xde\x7b\x1a\x3b\x35\x42\x1b\x61\x07\xb2\xe4\x23\x1f\xfe\x93\x27\x9c\x4e\xe3\xb6\x2d\xeb\x7c\xc0\xfe\xa4\x43\x42\xc5\x12\x1f\xa3\x6f\x2b\xbe\xb0\xf3\x19\xa8\xc0\xf9\x9c\x80\xfc\xf3\x2f\xe8\xe6\x46\xd0\xb8\x13\xad\xd9\xab\xba\x46\x4c\x8d\xb6\x7a\x96\xcd\x0f\xd5\xaa\xce\x98\x81\x62\x76\xa8\x88\x0d\xde\x15\x1b\x1a\xce\x3c\xa4\x61\xa9\x5f\xd5\x6e\x32\xce\x3d\x30\x26\x4f\x7b\x6e\x14\x4a\x92\x57\x87\xfc\x00\xa4\x91\xe6\x83\x40\x85\xb2\x18\xb7\x52\x60\x33\xb1\xfe\xf2\x2a\xe8\x75\xa3\x04\x89\x58\x7c\x77\x0b\xd4\xb6\x72\xb4\x4c\xc8\x4e\x24\x28\xb7\x32\x63\x58\x33\xf8\x06\xc2\x62\xd2\x6d\x22\x06\x98\x51\x3f\xe0\x7e\x36\xf4\x06\xd4\xbe\xab\xb8\x07\x58\xbd\x75\x4b\xbd\x05\x6f\xbb\xa3\xb9\x0b\xbc\x22\x60\xed\x14\xbe\x76\x34\xdd\x29\x70\x9d\x66\xe3\x81\xe8\x9e\xcc\x7b\xbb\xfd\xed\xed\x8e\x7b\xd1\xfa\x45\xe4\xbe\x0a\x89\x76\x0f\xbe\xad\x76\x6c\x67\xb9\x2c\x13\x1c\x32\x25\xae\x33\x94\x2b\x30\x98\x1a\x24\x54\x96\x80\xa9\x55\xa3\x98\x10\x0a\xec\x02\x81\xac\x36\x2c\xc6\x31\x5c\x2c\x10\x96\x4c\x66\xe8\x3a\xdd\x4f\x4a\x70\xb8\x11\x52\xc2\x0c\x21\x46\xe5\x6a\x0b\xe4\x30\x5b\xe5\x7b\x56\x64\x31\x81\x9b\x85\x90\xe8\x07\xdc\x11\x80\x20\x98\xa1\x50\x31\x44\x7e\xf1\xb8\x3f\xda\x14\x79\xec\x47\xd5\xbb\x24\x34\x90\x1a\xbd\x14\x1c\x39\x70\x41\xa9\x64\x2b\x70\x42\x1d\xec\x12\xcb\xc0\xb7\x9b\xb2\xee\x1d\x28\x37\x45\xea\x03\xe1\x7b\xff\x42\x0e\xa5\xbc\x12\xf9\xc5\xc9\xe4\x64\x0f\x22\xa6\x40\x2b\xb9\x72\x96\x27\xb4\xae\x12\xf4\x72\xab\xc3\x39\xfd\xdf\xfe\x8b\xd7\xff\x1f\xd0\x31\xff\x49\x8d\x1f\xb6\xeb\xa1\xad\x28\xab\x14\xc3\x99\xc5\x17\x56\x24\xb8\x55\x8d\x3c\xf6\x71\x60\x16\xdc\x5a\xb2\x2c\x49\xf7\xea\xce\x76\xb3\xc0\xdc\xbd\x50\x59\xb3\xaa\xbb\x06\xd6\x1d\x29\x23\x34\x83\x67\xc5\xb8\x14\xea\xc1\xbe\x52\x1a\xbb\x94\x07\x94\x62\x24\xe6\x02\xb9\x63\x00\xcf\xf2\xa2\x79\x0f\x84\xe2\x22\xf2\xf7\xc8\xde\x89\x44\x82\x0e\xe4\x46\x0f\xcb\xe8\xeb\x27\x45\x0b\x9d\x49\xee\x4e\x26\xd2\x49\x2a\x71\xd8\xcd\xa9\x5d\x27\xc0\x6d\x31\xe6\xbc\xdb\x6f\xb6\x15\xca\x97\x0c\x39\x7a\xa7\xa8\x69\xed\xf6\xe4\x2f\xea\x84\x46\x60\x68\xde\x96\xf7\x04\xb3\xe1\xa2\xa7\x75\x0a\xdd\x36\xb6\xa7\x81\xed\x69\x5d\x07\x9a\xd6\x76\xbb\xda\xd3\xa8\x76\x5b\xd4\xab\x9a\xfe\x9d\xb6\x74\x9b\x6d\x0a\xeb\x3a\x15\x0a\xaf\xc9\x7d\x21\xd5\x44\x62\x26\x5d\xa8\xf4\xfe\xa1\xe7\xb7\x98\xac\xe7\x7a\x7e\x17\x92\xef\xa6\x0e\xc7\x6f\x16\x8d\x62\x72\xa2\xa3\x5a\x21\x9e\x19\x59\xfe\xef\x80\x0e\xc2\x30\x16\x76\x91\xcd\xc6\x91\x4e\x42\x72\xcc\x91\x21\xf9\xff\x4f\x50\x68\x0d\x62\x98\x30\xa1\xc2\xc8\x64\xdc\x7d\x6e\x3d\x5a\x8f\xfe\x0a\x00\x00\xff\xff\xaf\x0a\xcf\x92\x8e\x21\x00\x00")

func apisOpenapiApisSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apisOpenapiApisSwaggerJson,
		"apis/openapi/apis/swagger.json",
	)
}

func apisOpenapiApisSwaggerJson() (*asset, error) {
	bytes, err := apisOpenapiApisSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apis/openapi/apis/swagger.json", size: 8590, mode: os.FileMode(420), modTime: time.Unix(1676146356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apis/openapi/apis/swagger.json": apisOpenapiApisSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apis": {nil, map[string]*bintree{
		"openapi": {nil, map[string]*bintree{
			"apis": {nil, map[string]*bintree{
				"swagger.json": {apisOpenapiApisSwaggerJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
